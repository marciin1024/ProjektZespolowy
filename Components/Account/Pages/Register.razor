@page "/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities


@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="h-100 w-100 d-flex justify-content-center align-items-center">
    <div id="loginContainer">
        <StatusMessage Message="@Message" />
        <EditForm Model="@Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" Context="register">
            <DataAnnotationsValidator />
            <div class="loginTitle">Rejestracja</div>
            <div class="w-100">
                <InputText type="text"
                           placeholder="imię"
                           onfocus="this.placeholder=''"
                           onblur="this.placeholder='imię'"
                           @bind-Value="Input.Name" />
                <ValidationMessage For="() => Input.Name"></ValidationMessage>
            </div>
            <div class="w-100">
                <InputText type="text"
                           placeholder="Nazwisko"
                           onfocus="this.placeholder=''"
                           onblur="this.placeholder='nazwisko'"
                           @bind-Value="Input.Surname" />
                <ValidationMessage For="() => Input.Surname"></ValidationMessage>
            </div>
            <div class="w-100">
                <InputText type="text"
                           placeholder="login"
                           onfocus="this.placeholder=''"
                           onblur="this.placeholder='login'"
                           @bind-Value="Input.Login" />
                <ValidationMessage For="() => Input.Login"></ValidationMessage>
            </div>
            <div class="w-100">
                <InputText type="email"
                           placeholder="email"
                           onfocus="this.placeholder=''"
                           onblur="this.placeholder='email'"
                           @bind-Value="Input.Email" />
                <ValidationMessage For="() => Input.Email"></ValidationMessage>
            </div>
            <div class="w-100">
                <InputText type="password"
                           placeholder="hasło"
                           onfocus="this.placeholder=''"
                           onblur="this.placeholder='hasło'"
                           @bind-Value="Input.Password" />
                <ValidationMessage For="() => Input.Password"></ValidationMessage>
            </div>
            <div class="w-100">
                <InputText type="password"
                           placeholder="powtórz hasło"
                           onfocus="this.placeholder=''"
                           onblur="this.placeholder='powtórz hasło'"
                           @bind-Value="Input.ConfirmPassword" />
                <ValidationMessage For="() => Input.ConfirmPassword"></ValidationMessage>
            </div>
            <button type="submit">Zarejestruj</button>
            <div class="registerProposition">Masz już konto?<a class="register" href="/login"> Zaloguj się</a></div>
        </EditForm>
    </div>
</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext) {
        var user = CreateUser();
        user.FirstName = Input.Name;
        user.LastName = Input.Surname;

        await UserStore.SetUserNameAsync(user, Input.Login, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Login, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if(!result.Succeeded) {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await UserManager.AddToRoleAsync(user, "StandardUser");
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private User CreateUser() {
        try {
            return Activator.CreateInstance<User>();
        } catch {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(User)}'. " +
                $"Ensure that '{nameof(User)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<User> GetEmailStore() {
        if(!UserManager.SupportsUserEmail) {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<User>)UserStore;
    }

    private sealed class InputModel {
        [Required]
        [Display(Name = "Imię")]
        public string Name { get; set; } = "";

        [Required]
        [Display(Name = "Nazwisko")]
        public string Surname { get; set; } = "";

        [Required]
        [Display(Name = "Login")]
        public string Login { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}